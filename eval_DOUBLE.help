eval::eval<double> eval_([](const char& ch)->bool {return '0' <= ch && ch <= '9'; }, [](const char& ch)->bool {return ('0' <= ch && ch <= '9') || ch == '.'; }, [](const std::string& str) {return std::stod(str); });
void initeval()
{
	eval_.oper1.first->insert("-", { 1,-1u,[](const double* arr)->double {return -arr[0]; } });
	eval_.oper1.first->insert("+", { 1,-1u,[](const double* arr)->double {return arr[0]; } });
	eval_.oper2.first->insert("+", { 2,0,[](const double* arr)->double {return arr[0] + arr[1]; } });
	eval_.oper2.first->insert("-", { 2,0,[](const double* arr)->double {return arr[0] - arr[1]; } });
	eval_.oper2.first->insert("*", { 2,1,[](const double* arr)->double {return arr[0] * arr[1]; } });
	eval_.oper2.first->insert("/", { 2,1,[](const double* arr)->double {return arr[0] / arr[1]; } });
	eval_.oper2.first->insert("^", { 2,2,[](const double* arr)->double {return std::pow(arr[0],arr[1]); } });
	eval_.funcs.first->insert("sin", { 1,-1u,[](const double* arr)->double {return sin(arr[0]); } });
	eval_.funcs.first->insert("cos", { 1,-1u,[](const double* arr)->double {return cos(arr[0]); } });
	eval_.funcs.first->insert("tan", { 1,-1u,[](const double* arr)->double {return tan(arr[0]); } });
	eval_.funcs.first->insert("asin", { 1,-1u,[](const double* arr)->double {return asin(arr[0]); } });
	eval_.funcs.first->insert("acos", { 1,-1u,[](const double* arr)->double {return acos(arr[0]); } });
	eval_.funcs.first->insert("atan", { 1,-1u,[](const double* arr)->double {return atan(arr[0]); } });
	eval_.funcs.first->insert("sqrt", { 1,-1u,[](const double* arr)->double {return sqrt(arr[0]); } });
	eval_.funcs.first->insert("log", { 2,-1u,[](const double* arr)->double {return log(arr[1]) / log(arr[0]); } });
	eval_.funcs.first->insert("log10", { 1,-1u,[](const double* arr)->double {return log10(arr[0]); } });
	eval_.funcs.first->insert("exp", { 1,-1u,[](const double* arr)->double {return exp(arr[0]); } });
	eval_.funcs.first->insert("abs", { 1,-1u,[](const double* arr)->double {return abs(arr[0]); } });
	eval_.funcs.first->insert("floor", { 1,-1u,[](const double* arr)->double {return floor(arr[0]); } });
	eval_.funcs.first->insert("ceil", { 1,-1u,[](const double* arr)->double {return ceil(arr[0]); } });
	eval_.vars.first->insert("pi", { eval::vartype::CONSTVAR,M_PI });
	eval_.vars.first->insert("e", { eval::vartype::CONSTVAR,M_E });
}